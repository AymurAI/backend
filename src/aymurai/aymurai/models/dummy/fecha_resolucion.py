# codeblock generated by devtools
# source: /workspace/notebooks/dev/patterns/01-datetimes/01-document-date.ipynb


from copy import deepcopy

from aymurai.meta.types import DataItem, DataBlock
from aymurai.meta.pipeline_interfaces import TrainModule


class DummyExtractorFechaResolucion(TrainModule):
    def save(self, path: str):
        return

    def load(self, path: str):
        return

    def fit(self, train: DataBlock, val: DataBlock):
        return

    def predict(self, data: DataBlock) -> DataBlock:
        data = [self.predict_single(item) for item in data]

        return data

    def predict_single(self, item: DataItem) -> DataItem:
        item = deepcopy(item)

        # format prediction
        if "predictions" not in item:
            item["predictions"] = {}
        if "records" not in item["predictions"]:
            item["predictions"]["records"] = {}
        if "entities" not in item["predictions"]:
            item["predictions"]["entities"] = []
        if "doc-cats" not in item["predictions"]:
            item["predictions"]["doc-cats"] = {}
        item["predictions"]["doc-cats"]["fecha_resolucion"] = None
        item["predictions"]["records"]["fecha_resolucion"] = []

        ents = []
        if "entities" in item["data"]:
            ents += item["data"]["entities"]

        # if there is no entities just pass
        if not ents:
            return item

        #
        dates = filter(lambda x: x["label"] == "DATE", ents)
        dates = sorted(dates, key=lambda e: e["start"])

        if not dates:
            return item

        # get first prediction
        span = dates[0]
        dt = span["attrs"]["aymurai_date"]

        span["label"] = "FECHA_RESOLUCION"
        item["predictions"]["entities"].append(span)
        item["predictions"]["records"]["fecha_resolucion"].append(dt)
        item["predictions"]["doc-cats"]["fecha_resolucion"] = dt

        return item
