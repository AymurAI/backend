# codeblock generated by devtools
# source: /workspace/notebooks/dev/patterns/03-sections-spot/20-tipo-resolucion.ipynb


from copy import deepcopy
from functools import reduce

import regex

from aymurai.utils.misc import get_element
from aymurai.meta.types import DataItem, DataBlock
from aymurai.meta.pipeline_interfaces import TrainModule


class DummyExtractorTipoResolucion(TrainModule):
    def save(self, path: str):
        return

    def load(self, path: str):
        return

    def fit(self, train: DataBlock, val: DataBlock):
        return

    def predict(self, data: DataBlock) -> DataBlock:
        data = [self.predict_single(item) for item in data]

        return data

    def predict_single(self, item: DataItem) -> DataItem:
        item = deepcopy(item)

        # format prediction
        if "predictions" not in item:
            item["predictions"] = {}
        if "records" not in item["predictions"]:
            item["predictions"]["records"] = {}
        if "entities" not in item["predictions"]:
            item["predictions"]["entities"] = []
        if "doc-cats" not in item["predictions"]:
            item["predictions"]["doc-cats"] = {}
        item["predictions"]["doc-cats"]["tipo_de_resolucion"] = "interlocutoria"
        item["predictions"]["records"]["tipo_de_resolucion"] = ["interlocutoria"]

        # skip if there are no section parser
        if not (sections := get_element(item, ["data", "spans", "section"], [])):
            return item

        sections = filter(
            lambda x: x["label"] in ["SECTION:HEAD", "SECTION:DECISION", "KEYWORDS"],
            sections,
        )
        sections = sorted(sections, key=lambda e: e["start"])

        if not sections:
            return item

        text = reduce(lambda x, y: x + y, map(lambda z: z["text"], sections))
        # text = item['data']['doc.text']

        patterns = [r"(?i)interlocutoria"]

        interlocutoria = regex.findall(r"(?i)interlocutoria{e<=2}", text)
        definitiva = regex.findall(r"(?i)resoluci[oÃ³]n[_\s]+definitiva{e<=2}", text)

        tipo_resolucion = "definitiva" if definitiva else "interlocutoria"

        item["predictions"]["records"]["tipo_de_resolucion"].append(tipo_resolucion)
        item["predictions"]["doc-cats"]["tipo_de_resolucion"] = tipo_resolucion

        return item
