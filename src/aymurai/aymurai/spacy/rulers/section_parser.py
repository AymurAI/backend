# codeblock generated by devtools
# source: /workspace/notebooks/dev/patterns/03-sections-spot/00-section-breaks.ipynb

from copy import deepcopy
from functools import partial

from spacy.tokens import Span
from more_itertools import zip_offset

import aymurai.spacy.components.loader
from aymurai.spacy.utils import load_base, format_entity
from aymurai.meta.pipeline_interfaces import DataItem, Transform


class AymuraiRulerSectionParser(Transform):
    def __init__(
        self,
        base: str,
        breakpoints: dict,
        context_offset: int = 10,
        spans_key: str = "section",
    ):
        global __nlp
        __nlp = load_base(base)
        __nlp.add_pipe("enhanced_regex_ruler", config={"patterns": breakpoints})

        self.offset = context_offset

        self.spans_key = spans_key

    def __call__(self, item: DataItem) -> DataItem:
        item = deepcopy(item)

        doc = __nlp.pipe([item["data"]["doc.text"]])
        doc = list(doc)[0]

        ents = sorted(doc.ents, key=lambda x: x.start_char)
        if not ents:
            return item
        spans = [Span(doc, start=0, end=ents[0].start, label="SECTION:HEAD")]

        for ent1, ent2 in zip_offset(
            ents,
            ents,
            offsets=(0, 1),
            longest=True,
            fillvalue=Span(doc, start=len(doc), end=len(doc)),
        ):
            spans.append(
                Span(
                    doc,
                    start=ent1.start,
                    end=ent2.start,
                    label=ent1.label_,
                )
            )

        _format_entity = partial(format_entity, offset=self.offset)
        formatted_ents = map(_format_entity, spans)

        if not "spans" in item["data"]:
            item["data"]["spans"] = {}
        if not self.spans_key in item["data"]["spans"]:
            item["data"]["spans"][self.spans_key] = []

        item["data"]["spans"][self.spans_key] += list(formatted_ents)

        return item
