# codeblock generated by devtools
# source: /workspace/notebooks/dev/patterns/names/03-facebook-lookup-prod.ipynb


import unicodedata
from itertools import chain

from unidecode import unidecode
from spacy.language import Language
from spacy.pipeline import EntityRuler
from more_itertools import unique_everseen

from aymurai.logging import get_logger
from aymurai.devtools import resolve_package_path
from aymurai.utils.facebook_names import load_counts

logger = get_logger(__name__)

EXTRANAMES_BASEPATH = resolve_package_path("aymurai.data.spanish.names")
EXTRANAMES_FILENAME = f"{EXTRANAMES_BASEPATH}/extra_names.txt"


@Language.factory(name="name_lookup_ruler")
def name_lookup(
    nlp,
    name,
    country_codes=["AR"],
    overwrite_ents: bool = True,
    min_freq: int = 100,
    min_name_length: int = 4,
    unicode_norm: str = "NFKC",
):
    db_names = load_counts(
        country_codes=country_codes,
        min_freq=min_freq,
        min_name_length=min_name_length,
    )["name"]
    with open(EXTRANAMES_FILENAME, "r") as file:
        extra_names = file.readlines()
        extra_names = map(str.strip, extra_names)
        extra_names = map(str.title, extra_names)

    names = chain(db_names, extra_names)

    norm_names = map(lambda x: unicodedata.normalize(unicode_norm, x), names)
    norm_names = tuple(norm_names)
    ascii_names = map(lambda x: unidecode(x), norm_names)

    names = tuple(chain(norm_names, ascii_names))
    names = chain(names, map(str.upper, names))

    ruler = EntityRuler(nlp, name=name, overwrite_ents=overwrite_ents)
    ruler.add_patterns(
        [
            {
                "label": "PER",
                "id": "PER",
                "pattern": [{"ORTH": name}],
            }
            for name in names
        ]
    )
    return ruler


@Language.factory(name="join_consecutive_names")
def join_consecutive_name_entities(nlp, name):
    ruler = EntityRuler(nlp, name=name, overwrite_ents=True)
    ruler.add_patterns(
        [
            # explicit consecutive names
            {
                "label": "PER",
                "id": "PER",
                "pattern": [{"ENT_TYPE": "PER", "OP": "{2,}"}],
            },
            # comma/dot separated
            {
                "label": "PER",
                "id": "PER",
                "pattern": [
                    {"ENT_TYPE": "PER", "OP": "+"},
                    {"IS_PUNCT": True},
                    {"ENT_TYPE": "PER", "OP": "+"},
                ],
            },
            # names with abbrvs within
            {
                "label": "PER",
                "id": "PER",
                "pattern": [
                    {"ENT_TYPE": "PER", "OP": "+"},
                    {"TEXT": {"REGEX": r"[A-Z][\.\s\,]?"}},
                    {"ENT_TYPE": "PER", "OP": "+"},
                ],
            },
        ]
    )
    return ruler
